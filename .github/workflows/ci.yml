name: CI Workflow
on:
  push:
    branches:
      - main
jobs:  
  flake8-check:
    name: Flake8 check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'
      - name: Run flake8 for code style check
        uses: py-actions/flake8@v2

  editorconfig-check:
    name: EditorConfig check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run EditorConfig Checker
        uses: editorconfig-checker/action-editorconfig-checker@main

  snyk:
    name: Snyk check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Snyk
        working-directory: ${{github.workspace}}
        run: |
          pip install -r src/requirements.txt
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --all-projects --detection-depth=3

  bandit-check:
    name: Bandit check
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Run Bandit Security Analysis
        uses: PyCQA/bandit-action@v1

  unit-testing:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [flake8-check, editorconfig-check, snyk, bandit-check]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/requirements.txt
      - name: Run tests
        run: python -m unittest src/app_test.py

  docker-build-and-scan:
    name: Test Docker image with Trivy
    runs-on: ubuntu-latest
    needs: [unit-testing]
    permissions:
      security-events: write
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t devops-project:latest .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: devops-project:latest
          format: 'sarif'  
          output: 'trivy-results.sarif' 
          exit-code: 0  
          ignore-unfixed: true 
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'  
          sha: ${{ github.sha }} 
          ref: ${{ github.ref }}

  build-and-push:
    name: Build and Push the Docker Container
    runs-on: ubuntu-latest
    needs: [docker-build-and-scan]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devops-project:latest

  k8s-deployment:
    name: Deploy the app
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
      - name: Setup minikube
        uses: medyagh/setup-minikube@master
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Pull docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/devops-project:latest
      - name: Minikube rollout
        run: |
          kubectl apply -f k8s/
          kubectl get deployments
          kubectl describe deployment devops-project-deployment
          kubectl wait --for=condition=ready pod -l app=devops-project --timeout=5m
          kubectl rollout status deployment/devops-project-deployment  --timeout=5m
      - name: Check kubes status
        run: kubectl get all
      - name: Stop the minicube
        run: minikube stop